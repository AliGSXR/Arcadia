security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Entity\User:
            algorithm: plaintext
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
                default_target_path: app_home
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
        ROLE_EMPLOYEE: ROLE_USER
        ROLE_VETERINARIAN: ROLE_USER
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin/user, roles: ROLE_ADMIN }
        - { path: /admin/service$, roles: [ROLE_ADMIN, ROLE_EMPLOYEE] }
        - { path: /admin/service/\d+$, methods: [GET], roles: [ROLE_ADMIN, ROLE_EMPLOYEE] }
        - { path: /admin/service/\d+$, methods: [POST], roles: ROLE_ADMIN }
        - { path: /admin/service/\d+/edit, roles: [ROLE_ADMIN, ROLE_EMPLOYEE] }
        - { path: ^/admin/service/new, roles: ROLE_ADMIN }
        - { path: /admin/service/delete$, roles: ROLE_ADMIN }
        - { path: ^/admin/horaire, roles: ROLE_ADMIN }
        - { path: ^/admin/animal, roles: ROLE_ADMIN }
        - { path: /admin/habitat$, roles: [ROLE_ADMIN, ROLE_VETERINARIAN] }
        - { path: /admin/habitat/\d+/edit, roles: [ ROLE_ADMIN, ROLE_VETERINARIAN ] }
        - { path: /admin/habitat/\d+$, roles: ROLE_ADMIN }
        - { path: ^/admin/habitat/new, roles: ROLE_ADMIN }
        - { path: ^/admin/race, roles: ROLE_ADMIN }
        - { path: ^/admin/rapport-veterinaire, roles: [ROLE_ADMIN, ROLE_VETERINARIAN] }
        - { path: ^/admin/rapport-veterinaire/\d+, roles: [ROLE_ADMIN, ROLE_VETERINARIAN] }
        - { path: ^/admin/image, roles: ROLE_ADMIN }
        - { path: ^/admin/avis, roles: ROLE_EMPLOYEE }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
